#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "requests",
#     "pillow", 
#     "click",
#     "pyproj",
# ]
# ///

# ABOUTME: Canadian wildfire map scraper that downloads base map tiles and fire perimeter data for a given date
# ABOUTME: Creates composite images showing wildfire perimeters overlaid on topographic base maps using CWFIS data

import sys
import click
import requests
from datetime import datetime
from pathlib import Path
import math
from PIL import Image, ImageDraw
from io import BytesIO
from urllib.parse import urlencode
import time

# CWFIS API endpoints - corrected URL from JavaScript source
BASE_MAP_URL = "https://geoappext.nrcan.gc.ca/arcgis/rest/services/BaseMaps/CBMT3978/MapServer/WMTS/tile/1.0.0/BaseMaps_CBMT3978/default/default028mm"
FIRE_PERIMETER_URL = "https://cwfis.cfs.nrcan.gc.ca/geoserver/public/wms"

# Default map configuration - focused on Canada and northern content
DEFAULT_ZOOM = 3  # Browser UI shows zoom 3 (200km scale)
# Shift center northeast to focus on Canada (move from original center toward upper-right content)
DEFAULT_CENTER = (200000, 1200000)  # Adjusted to focus on populated Canada areas
TILE_SIZE = 256
MAP_SIZE = (3, 3)  # More square aspect ratio, focused coverage

# WMTS tile grid parameters from JavaScript source (exact values)
TILE_ORIGIN = (-34655800, 39310000)  # origin: [-3.46558E7, 3.931E7]
RESOLUTIONS = [
    38364.660062653464,    # 0
    22489.62831258996,     # 1  
    13229.193125052918,    # 2
    7937.5158750317505,    # 3 <- DEFAULT_ZOOM (200km scale)
    4630.2175937685215,    # 4
    2645.8386250105837,    # 5
    1587.5031750063501,    # 6
    926.0435187537042,     # 7
    529.1677250021168,     # 8
    317.50063500127004,    # 9
    185.20870375074085,    # 10
    111.12522225044451,    # 11
    66.1459656252646,      # 12
    38.36466006265346,     # 13
    22.48962831258996,     # 14
    13.229193125052918,    # 15
    7.9375158750317505,    # 16
    4.6302175937685215     # 17
]

def validate_date(date_str: str) -> datetime:
    """Validate and parse ISO8601 date string."""
    try:
        return datetime.strptime(date_str, "%Y-%m-%d")
    except ValueError:
        raise click.BadParameter(f"Date must be in YYYY-MM-DD format, got: {date_str}")

def epsg3978_to_tile(x: float, y: float, zoom: int) -> tuple[int, int]:
    """Convert EPSG:3978 coordinates to tile coordinates using WMTS grid calculation."""
    if zoom >= len(RESOLUTIONS):
        raise ValueError(f"Zoom level {zoom} not supported, max is {len(RESOLUTIONS)-1}")
    
    resolution = RESOLUTIONS[zoom]
    origin_x, origin_y = TILE_ORIGIN
    
    # WMTS tile grid calculation
    # TileCol (X): how many tiles east from origin
    tile_col = int((x - origin_x) / (resolution * TILE_SIZE))
    
    # TileRow (Y): how many tiles south from origin  
    tile_row = int((origin_y - y) / (resolution * TILE_SIZE))
    
    return tile_col, tile_row

def tile_to_epsg3978_bbox(tile_col: int, tile_row: int, zoom: int) -> tuple[float, float, float, float]:
    """Convert tile coordinates to EPSG:3978 bounding box using WMTS grid calculation."""
    if zoom >= len(RESOLUTIONS):
        raise ValueError(f"Zoom level {zoom} not supported, max is {len(RESOLUTIONS)-1}")
    
    resolution = RESOLUTIONS[zoom]
    origin_x, origin_y = TILE_ORIGIN
    tile_size_map_units = resolution * TILE_SIZE
    
    # Calculate tile bounds
    min_x = origin_x + (tile_col * tile_size_map_units)
    max_x = min_x + tile_size_map_units
    max_y = origin_y - (tile_row * tile_size_map_units)
    min_y = max_y - tile_size_map_units
    
    return min_x, min_y, max_x, max_y

def download_base_tile(tile_col: int, tile_row: int, zoom: int) -> Image.Image:
    """Download a base map tile."""
    url = f"{BASE_MAP_URL}/{zoom}/{tile_row}/{tile_col}.jpg"
    
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        
        # Check if this is a blank tile
        blank_tile = response.headers.get('blank-tile') == 'true'
        if blank_tile:
            click.echo(f"Warning: Tile {tile_col},{tile_row} is blank (outside coverage area)", err=True)
        
        image = Image.open(BytesIO(response.content))
        click.echo(f"Downloaded base tile {tile_col},{tile_row}: {len(response.content)} bytes, format: {image.format}")
        return image
    except Exception as e:
        click.echo(f"Warning: Failed to download base tile {tile_col},{tile_row}: {e}", err=True)
        # Return blank tile
        return Image.new('RGB', (TILE_SIZE, TILE_SIZE), color='lightgray')

def download_fire_overlay(bbox: tuple[float, float, float, float], date_str: str) -> Image.Image:
    """Download fire perimeter overlay for a tile."""
    min_x, min_y, max_x, max_y = bbox
    
    params = {
        'SERVICE': 'WMS',
        'VERSION': '1.3.0',
        'REQUEST': 'GetMap',
        'FORMAT': 'image/png',
        'TRANSPARENT': 'true',
        'LAYERS': 'public:m3_polygons',
        'CQL_FILTER': f"mindate <= '{date_str} 12:00:00' and maxdate >= '{date_str} 12:00:00'",
        'WIDTH': str(TILE_SIZE),
        'HEIGHT': str(TILE_SIZE),
        'CRS': 'EPSG:3978',
        'STYLES': '',
        'BBOX': f'{min_x},{min_y},{max_x},{max_y}'
    }
    
    url = f"{FIRE_PERIMETER_URL}?{urlencode(params)}"
    
    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        image = Image.open(BytesIO(response.content))
        # Only show success message if we got actual fire data (not just empty transparent)
        if len(response.content) > 1000:  # More than just a small transparent PNG
            click.echo(f"Downloaded fire overlay: {len(response.content)} bytes")
        return image
    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 404:
            # 404 is normal - means no fire data for this tile/date
            pass
        else:
            click.echo(f"Warning: HTTP error downloading fire overlay: {e}", err=True)
        return Image.new('RGBA', (TILE_SIZE, TILE_SIZE), color=(0, 0, 0, 0))
    except Exception as e:
        click.echo(f"Warning: Failed to download fire overlay: {e}", err=True)
        return Image.new('RGBA', (TILE_SIZE, TILE_SIZE), color=(0, 0, 0, 0))

def create_wildfire_map(date: datetime, output_path: Path) -> None:
    """Create a wildfire map for the given date."""
    date_str = date.strftime("%Y-%m-%d")
    click.echo(f"Creating wildfire map for {date_str}...")
    
    # Calculate tile grid around default center
    center_x, center_y = DEFAULT_CENTER
    center_tile_col, center_tile_row = epsg3978_to_tile(center_x, center_y, DEFAULT_ZOOM)
    
    # Calculate tile bounds for map coverage
    tiles_wide, tiles_high = MAP_SIZE
    start_tile_col = center_tile_col - tiles_wide // 2
    start_tile_row = center_tile_row - tiles_high // 2
    
    click.echo(f"Downloading {tiles_wide}x{tiles_high} tiles centered on tile {center_tile_col},{center_tile_row}")
    click.echo(f"Tile range: col {start_tile_col} to {start_tile_col + tiles_wide - 1}, row {start_tile_row} to {start_tile_row + tiles_high - 1}")
    
    # Create final image
    final_width = tiles_wide * TILE_SIZE
    final_height = tiles_high * TILE_SIZE
    final_image = Image.new('RGB', (final_width, final_height))
    
    # Download and composite tiles
    # In WMTS: col = X (east), row = Y (south from origin)
    # In final image: x = horizontal (west to east), y = vertical (north to south)
    for row_idx in range(tiles_high):
        for col_idx in range(tiles_wide):
            tile_col = start_tile_col + col_idx  # col_idx maps to tile columns (east-west)
            tile_row = start_tile_row + row_idx  # row_idx maps to tile rows (north-south)
            
            click.echo(f"Processing image position {col_idx+1},{row_idx+1} of {tiles_wide},{tiles_high} (tile coords: col={tile_col}, row={tile_row})")
            
            # Download base tile
            base_tile = download_base_tile(tile_col, tile_row, DEFAULT_ZOOM)
            
            # Download fire overlay
            bbox = tile_to_epsg3978_bbox(tile_col, tile_row, DEFAULT_ZOOM)
            fire_overlay = download_fire_overlay(bbox, date_str)
            
            # Composite base and overlay
            if fire_overlay.mode == 'RGBA':
                base_tile = base_tile.convert('RGBA')
                composite = Image.alpha_composite(base_tile, fire_overlay)
                composite = composite.convert('RGB')
            else:
                composite = base_tile
            
            # Place in final image - col_idx=horizontal (x), row_idx=vertical (y)
            paste_x = col_idx * TILE_SIZE
            paste_y = row_idx * TILE_SIZE
            click.echo(f"  -> Placing tile col={tile_col}, row={tile_row} at position {paste_x},{paste_y} in final image")
            final_image.paste(composite, (paste_x, paste_y))
            
            # Brief delay to be respectful to servers
            time.sleep(0.1)
    
    # Save final image
    final_image.save(output_path, 'PNG', optimize=True)
    click.echo(f"Wildfire map saved to: {output_path}")
    click.echo(f"Image size: {final_width}x{final_height} pixels")

@click.command()
@click.argument('date', callback=lambda ctx, param, value: validate_date(value))
@click.option('--output', '-o', type=click.Path(), help='Output filename (default: wildfire-YYYY-MM-DD.png)')
def main(date: datetime, output: str = None) -> None:
    """
    Download Canadian wildfire map for a given date.
    
    DATE: Date in YYYY-MM-DD format (e.g., 2025-08-04)
    
    Example:
        wildfire 2025-08-04
    """
    if output is None:
        output = f"wildfire-{date.strftime('%Y-%m-%d')}.png"
    
    output_path = Path(output)
    
    try:
        create_wildfire_map(date, output_path)
    except KeyboardInterrupt:
        click.echo("\nOperation cancelled by user", err=True)
        sys.exit(1)
    except Exception as e:
        click.echo(f"Error: {e}", err=True)
        sys.exit(1)

if __name__ == '__main__':
    main()